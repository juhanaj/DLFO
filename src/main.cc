#include <util/delay.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

#include "mcp4822.h"

extern "C" {
#include "uart.h"
}

const char SINE[] PROGMEM = 
{
    (char)0x7e, (char)0x7e, (char)0x7f, (char)0x7f, (char)0x7f, (char)0x80, (char)0x80, (char)0x80, 
    (char)0x81, (char)0x81, (char)0x81, (char)0x81, (char)0x82, (char)0x82, (char)0x82, (char)0x83, 
    (char)0x83, (char)0x83, (char)0x83, (char)0x84, (char)0x84, (char)0x84, (char)0x85, (char)0x85, 
    (char)0x85, (char)0x85, (char)0x86, (char)0x86, (char)0x86, (char)0x87, (char)0x87, (char)0x87, 
    (char)0x87, (char)0x88, (char)0x88, (char)0x88, (char)0x89, (char)0x89, (char)0x89, (char)0x8a, 
    (char)0x8a, (char)0x8a, (char)0x8a, (char)0x8b, (char)0x8b, (char)0x8b, (char)0x8c, (char)0x8c, 
    (char)0x8c, (char)0x8c, (char)0x8d, (char)0x8d, (char)0x8d, (char)0x8d, (char)0x8e, (char)0x8e, 
    (char)0x8e, (char)0x8f, (char)0x8f, (char)0x8f, (char)0x8f, (char)0x90, (char)0x90, (char)0x90, 
    (char)0x90, (char)0x91, (char)0x91, (char)0x91, (char)0x91, (char)0x92, (char)0x92, (char)0x92, 
    (char)0x92, (char)0x93, (char)0x93, (char)0x93, (char)0x94, (char)0x94, (char)0x94, (char)0x94, 
    (char)0x95, (char)0x95, (char)0x95, (char)0x95, (char)0x96, (char)0x96, (char)0x96, (char)0x96, 
    (char)0x97, (char)0x97, (char)0x97, (char)0x97, (char)0x97, (char)0x98, (char)0x98, (char)0x98, 
    (char)0x98, (char)0x99, (char)0x99, (char)0x99, (char)0x99, (char)0x9a, (char)0x9a, (char)0x9a, 
    (char)0x9a, (char)0x9a, (char)0x9b, (char)0x9b, (char)0x9b, (char)0x9b, (char)0x9c, (char)0x9c, 
    (char)0x9c, (char)0x9c, (char)0x9c, (char)0x9d, (char)0x9d, (char)0x9d, (char)0x9d, (char)0x9d, 
    (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9f, (char)0x9f, 
    (char)0x9f, (char)0x9f, (char)0x9f, (char)0xa0, (char)0xa0, (char)0xa0, (char)0xa0, (char)0xa0, 
    (char)0xa0, (char)0xa1, (char)0xa1, (char)0xa1, (char)0xa1, (char)0xa1, (char)0xa1, (char)0xa2, 
    (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa3, (char)0xa3, 
    (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa4, (char)0xa4, (char)0xa4, 
    (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa5, (char)0xa5, 
    (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, 
    (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, 
    (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, (char)0xa7, 
    (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, 
    (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa6, (char)0xa5, (char)0xa5, 
    (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, (char)0xa5, 
    (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, (char)0xa4, 
    (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa3, (char)0xa2, 
    (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa2, (char)0xa1, (char)0xa1, 
    (char)0xa1, (char)0xa1, (char)0xa1, (char)0xa1, (char)0xa0, (char)0xa0, (char)0xa0, (char)0xa0, 
    (char)0xa0, (char)0xa0, (char)0x9f, (char)0x9f, (char)0x9f, (char)0x9f, (char)0x9f, (char)0x9e, 
    (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9e, (char)0x9d, (char)0x9d, (char)0x9d, 
    (char)0x9d, (char)0x9d, (char)0x9c, (char)0x9c, (char)0x9c, (char)0x9c, (char)0x9c, (char)0x9b, 
    (char)0x9b, (char)0x9b, (char)0x9b, (char)0x9a, (char)0x9a, (char)0x9a, (char)0x9a, (char)0x9a, 
    (char)0x99, (char)0x99, (char)0x99, (char)0x99, (char)0x98, (char)0x98, (char)0x98, (char)0x98, 
    (char)0x98, (char)0x97, (char)0x97, (char)0x97, (char)0x97, (char)0x96, (char)0x96, (char)0x96, 
    (char)0x96, (char)0x95, (char)0x95, (char)0x95, (char)0x95, (char)0x94, (char)0x94, (char)0x94, 
    (char)0x94, (char)0x93, (char)0x93, (char)0x93, (char)0x93, (char)0x92, (char)0x92, (char)0x92, 
    (char)0x92, (char)0x91, (char)0x91, (char)0x91, (char)0x90, (char)0x90, (char)0x90, (char)0x90, 
    (char)0x8f, (char)0x8f, (char)0x8f, (char)0x8f, (char)0x8e, (char)0x8e, (char)0x8e, (char)0x8d, 
    (char)0x8d, (char)0x8d, (char)0x8d, (char)0x8c, (char)0x8c, (char)0x8c, (char)0x8c, (char)0x8b, 
    (char)0x8b, (char)0x8b, (char)0x8a, (char)0x8a, (char)0x8a, (char)0x8a, (char)0x89, (char)0x89, 
    (char)0x89, (char)0x89, (char)0x88, (char)0x88, (char)0x88, (char)0x87, (char)0x87, (char)0x87, 
    (char)0x87, (char)0x86, (char)0x86, (char)0x86, (char)0x85, (char)0x85, (char)0x85, (char)0x85, 
    (char)0x84, (char)0x84, (char)0x84, (char)0x83, (char)0x83, (char)0x83, (char)0x83, (char)0x82, 
    (char)0x82, (char)0x82, (char)0x81, (char)0x81, (char)0x81, (char)0x81, (char)0x80, (char)0x80, 
    (char)0x80, (char)0x7f, (char)0x7f, (char)0x7f, (char)0x7f, (char)0x7e, (char)0x7e, (char)0x7e, 
    (char)0x7d, (char)0x7d, (char)0x7d, (char)0x7d, (char)0x7c, (char)0x7c, (char)0x7c, (char)0x7b, 
    (char)0x7b, (char)0x7b, (char)0x7b, (char)0x7a, (char)0x7a, (char)0x7a, (char)0x79, (char)0x79, 
    (char)0x79, (char)0x79, (char)0x78, (char)0x78, (char)0x78, (char)0x77, (char)0x77, (char)0x77, 
    (char)0x77, (char)0x76, (char)0x76, (char)0x76, (char)0x75, (char)0x75, (char)0x75, (char)0x75, 
    (char)0x74, (char)0x74, (char)0x74, (char)0x73, (char)0x73, (char)0x73, (char)0x73, (char)0x72, 
    (char)0x72, (char)0x72, (char)0x72, (char)0x71, (char)0x71, (char)0x71, (char)0x71, (char)0x70, 
    (char)0x70, (char)0x70, (char)0x6f, (char)0x6f, (char)0x6f, (char)0x6f, (char)0x6e, (char)0x6e, 
    (char)0x6e, (char)0x6e, (char)0x6d, (char)0x6d, (char)0x6d, (char)0x6d, (char)0x6d, (char)0x6c, 
    (char)0x6c, (char)0x6c, (char)0x6b, (char)0x6b, (char)0x6b, (char)0x6b, (char)0x6b, (char)0x6a, 
    (char)0x6a, (char)0x6a, (char)0x6a, (char)0x69, (char)0x69, (char)0x69, (char)0x69, (char)0x68, 
    (char)0x68, (char)0x68, (char)0x68, (char)0x67, (char)0x67, (char)0x67, (char)0x67, (char)0x67, 
    (char)0x66, (char)0x66, (char)0x66, (char)0x66, (char)0x66, (char)0x65, (char)0x65, (char)0x65, 
    (char)0x65, (char)0x64, (char)0x64, (char)0x64, (char)0x64, (char)0x64, (char)0x63, (char)0x63, 
    (char)0x63, (char)0x63, (char)0x63, (char)0x62, (char)0x62, (char)0x62, (char)0x62, (char)0x62, 
    (char)0x62, (char)0x61, (char)0x61, (char)0x61, (char)0x61, (char)0x61, (char)0x60, (char)0x60, 
    (char)0x60, (char)0x60, (char)0x60, (char)0x60, (char)0x5f, (char)0x5f, (char)0x5f, (char)0x5f, 
    (char)0x5f, (char)0x5f, (char)0x5e, (char)0x5e, (char)0x5e, (char)0x5e, (char)0x5e, (char)0x5e, 
    (char)0x5e, (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5d, 
    (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, 
    (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, 
    (char)0x5b, (char)0x5b, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, 
    (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x59, (char)0x59, 
    (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, 
    (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, 
    (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x58, (char)0x58, (char)0x58, (char)0x58, 
    (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, 
    (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, 
    (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x58, (char)0x59, (char)0x59, (char)0x59, 
    (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, 
    (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, (char)0x59, 
    (char)0x59, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, 
    (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5a, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, 
    (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5b, (char)0x5c, (char)0x5c, 
    (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5c, (char)0x5d, (char)0x5d, (char)0x5d, 
    (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5d, (char)0x5e, (char)0x5e, (char)0x5e, 
    (char)0x5e, (char)0x5e, (char)0x5e, (char)0x5f, (char)0x5f, (char)0x5f, (char)0x5f, (char)0x5f, 
    (char)0x5f, (char)0x60, (char)0x60, (char)0x60, (char)0x60, (char)0x60, (char)0x60, (char)0x61, 
    (char)0x61, (char)0x61, (char)0x61, (char)0x61, (char)0x62, (char)0x62, (char)0x62, (char)0x62, 
    (char)0x62, (char)0x63, (char)0x63, (char)0x63, (char)0x63, (char)0x63, (char)0x64, (char)0x64, 
    (char)0x64, (char)0x64, (char)0x64, (char)0x65, (char)0x65, (char)0x65, (char)0x65, (char)0x65, 
    (char)0x66, (char)0x66, (char)0x66, (char)0x66, (char)0x67, (char)0x67, (char)0x67, (char)0x67, 
    (char)0x68, (char)0x68, (char)0x68, (char)0x68, (char)0x68, (char)0x69, (char)0x69, (char)0x69, 
    (char)0x69, (char)0x6a, (char)0x6a, (char)0x6a, (char)0x6a, (char)0x6b, (char)0x6b, (char)0x6b, 
    (char)0x6b, (char)0x6c, (char)0x6c, (char)0x6c, (char)0x6c, (char)0x6d, (char)0x6d, (char)0x6d, 
    (char)0x6d, (char)0x6e, (char)0x6e, (char)0x6e, (char)0x6f, (char)0x6f, (char)0x6f, (char)0x6f, 
    (char)0x70, (char)0x70, (char)0x70, (char)0x70, (char)0x71, (char)0x71, (char)0x71, (char)0x71, 
    (char)0x72, (char)0x72, (char)0x72, (char)0x73, (char)0x73, (char)0x73, (char)0x73, (char)0x74, 
    (char)0x74, (char)0x74, (char)0x75, (char)0x75, (char)0x75, (char)0x75, (char)0x76, (char)0x76, 
    (char)0x76, (char)0x77, (char)0x77, (char)0x77, (char)0x77, (char)0x78, (char)0x78, (char)0x78, 
    (char)0x78, (char)0x79, (char)0x79, (char)0x79, (char)0x7a, (char)0x7a, (char)0x7a, (char)0x7b, 
    (char)0x7b, (char)0x7b, (char)0x7b, (char)0x7c, (char)0x7c, (char)0x7c, (char)0x7d, (char)0x7d, 
    (char)0x7d, (char)0x7d, (char)0x7e, (char)0x7e, (char)0x7e, (char)0x7f, (char)0x7f, (char)0x7f, 
    (char)0x7f, (char)0x80, (char)0x80, (char)0x80, (char)0x81, (char)0x81, (char)0x81, (char)0x82, 
    (char)0x82, (char)0x82, (char)0x82
};


// Macro for calculating array size
#define ARRAY_SIZE(x) sizeof(x) / sizeof(x[0])

MCP4822 dac;

const static uint32_t SHIFT_AMOUNT = 16;
const static uint32_t SHIFT_MASK = (((uint32_t)1 << SHIFT_AMOUNT) - 1);
const static uint32_t MAX_FREQ = 200000;
const static uint32_t MIN_FREQ = 100;
const static uint32_t SAMPLE_FREQ = 11363; // 1000mHz

volatile uint32_t phase_delta = 0;
uint32_t freq_pot = 0;
uint32_t i = 0;


int main(void) {
    cli();

    // Setup audio out timer
    TCCR2A = 0;
    TCCR2B = 0;
    TCNT2 = 0;
    TCCR2A = (1 << WGM21);
    TCCR2B = (1 << CS22);

    OCR2A = 21;
    TIMSK2 = (1 << OCIE2A);

    dac.init();

    // Enabled USART and redirect standard input/output to UART
    Uart::init();
    stdout = uart_output;
    stdin = uart_input;

    sei(); // turn on interrupts

    // Set up analog read parameters for reading potentiometer
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    // Reference AVCC
    ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3));
    ADMUX |= (1 << REFS0);

    // Free running mode
    ADCSRA |= (1 << ADSC);

    // Enable ADC
    ADCSRA |= (1 << ADEN);

    while(1) {
      // Start ADC conversion
      ADCSRA |= (1 << ADSC);
      while(ADCSRA & (1<<ADSC));
      freq_pot = (ADCL | (ADCH << 8));

      uint32_t freq = (freq_pot << SHIFT_AMOUNT) / 128;
      phase_delta = ((ARRAY_SIZE(SINE) * (freq / SAMPLE_FREQ)));
      // printf("freq: %lu\n", freq);
      // printf("phase_delta: %lu\n", phase_delta & SHIFT_MASK);
      // printf("phase_add: %lu\n", phase_delta >> SHIFT_AMOUNT);
      // Spi::write(0xff);
      _delay_ms(2);
      // dac.write(0x0f);
    }
}



ISR(TIMER2_COMPA_vect) {
  i += phase_delta;

  unsigned short index = i >> SHIFT_AMOUNT;
  if (index >= ARRAY_SIZE(SINE)) {
    i = (i & SHIFT_MASK);
  }

  // Write sample to DAC. Bitshift 4 to left because we have
  // a 8-bit sample but a 12-bit DAC.
  uint16_t sample = pgm_read_byte_near(SINE+index)<<4;
  dac.write(sample);
}

